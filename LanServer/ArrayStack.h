#ifndef __ARRAYSTACK__H__
#define __ARRAYSTACK__H__


/*---------------------------------------------------------------------*/
// 간단한 템플릿 스택
/*---------------------------------------------------------------------*/
template <class DATA>
class CArrayStack
{
private :
	/////////////////////////////////////////////////////////////////////
	// e_ARRAY_STACK
	/////////////////////////////////////////////////////////////////////
	enum e_ARRAY_STACK
	{
		eSTACK_SIZE_DEFAULT =	1000		// 스택 기본 사이즈
	};

public :
	/////////////////////////////////////////////////////////////////////
	// 생성자, 소멸자
	// CArrayStack()	 : 기본 사이즈로 생성
	// CArrayStack(size) : 지정하는 사이즈로 생성
	/////////////////////////////////////////////////////////////////////
						CArrayStack()
	{
		Initial(eSTACK_SIZE_DEFAULT);
	}

	CArrayStack(int iStackSize)
	{
		Initial(iStackSize);
	}

	virtual				~CArrayStack()
	{
		Destory();
	}


private :
	/////////////////////////////////////////////////////////////////////
	// 초기화
	/////////////////////////////////////////////////////////////////////
	void				Initial(int iStackSize)
	{
		_pDataArray =	new DATA[iStackSize];

		_iStackSize =	iStackSize;
		_iUseSize	=	0;
		_iTop		=	0;

		InitializeCriticalSection(&_csStackLock);
	}

	/////////////////////////////////////////////////////////////////////
	// 파괴
	/////////////////////////////////////////////////////////////////////
	void				Destory()
	{
		delete[] _pDataArray;

		DeleteCriticalSection(&_csStackLock);
	}


public :
	/////////////////////////////////////////////////////////////////////
	// 스택 데이터 삽입.
	//
	// Parameter : (DATA) 삽입할 값.
	// return	 : (bool) 성공, 실패
	/////////////////////////////////////////////////////////////////////
	bool				Push(DATA data)
	{
		if (isFull())
			return false;

		_pDataArray[_iTop++] = data;

		_iUseSize++;

		return true;
	}


	/////////////////////////////////////////////////////////////////////
	// 스택 데이터 뽑기.
	//
	// Parameter : 없음.
	// return	 : (DATA) 뽑은 값.
	/////////////////////////////////////////////////////////////////////
	DATA				Pop()
	{
		if (isEmpty())
			return NULL;

		_iUseSize--;
		return _pDataArray[--_iTop];
	}


	/////////////////////////////////////////////////////////////////////
	// 스택이 비었는지 유무.
	//
	// Parameter : 없음.
	// return	 : (bool) 비었는지 유무.
	/////////////////////////////////////////////////////////////////////
	bool				isEmpty()
	{
		if (_iUseSize == 0)
			return true;

		return false;
	}


	/////////////////////////////////////////////////////////////////////
	// 스택이 꽉 찼는지 유무.
	//
	// Parameter : 없음.
	// return	 : (bool) 꽉 찼는지 유무.
	/////////////////////////////////////////////////////////////////////
	bool				isFull()
	{
		if (_iUseSize == _iStackSize)
			return true;

		return false;
	}


	/////////////////////////////////////////////////////////////////////
	// 스택 락.
	//
	// Parameter : 없음.
	// return	 : 없음.
	/////////////////////////////////////////////////////////////////////
	void				Lock()
	{
		EnterCriticalSection(&_csStackLock);
	}


	/////////////////////////////////////////////////////////////////////
	// 스택 언락.
	//
	// Parameter : (DATA) 삽입할 값.
	// return	 : (bool) 성공, 실패
	/////////////////////////////////////////////////////////////////////
	void				Unlock()
	{
		LeaveCriticalSection(&_csStackLock);
	}


	/////////////////////////////////////////////////////////////////////
	// 스택 데이터 사이즈.
	//
	// Parameter : 없음.
	// return	 : (int) 스택사이즈
	/////////////////////////////////////////////////////////////////////
	int					GetStackCount(){	return _iUseSize;	}


private :
	/////////////////////////////////////////////////////////////////////
	// 스택 데이터 배열
	/////////////////////////////////////////////////////////////////////
	DATA				*_pDataArray;


	/////////////////////////////////////////////////////////////////////
	// 스택 탑 인덱스
	/////////////////////////////////////////////////////////////////////
	int					_iTop;

	/////////////////////////////////////////////////////////////////////
	// 스택 사이즈
	/////////////////////////////////////////////////////////////////////
	int					_iStackSize;

	/////////////////////////////////////////////////////////////////////
	// 스택 사용중인 사이즈
	/////////////////////////////////////////////////////////////////////
	int					_iUseSize;

	/////////////////////////////////////////////////////////////////////
	// 스택 동기화 객체
	/////////////////////////////////////////////////////////////////////
	CRITICAL_SECTION	_csStackLock;
};

#endif